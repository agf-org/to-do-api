image: docker:19.03.12

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
  - build
  - test
  - push
  - deploy

build:
  stage: build
  rules:
    - if: ($CI_MERGE_REQUEST_IID || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master")
  script:
    - docker pull $CI_REGISTRY_IMAGE || true
    - > 
        docker build
        --cache-from $CI_REGISTRY_IMAGE
        --tag $CI_REGISTRY_IMAGE:temp
        .
    - docker push $CI_REGISTRY_IMAGE:temp

run_linter:
  stage: test
  variables:
    GIT_STRATEGY: none
  rules:
    - if: ($CI_MERGE_REQUEST_IID || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master")
  script:
    - >
      docker container run
      --rm
      $CI_REGISTRY_IMAGE:temp
      run linter
      
run_unit_tests:
  stage: test
  variables:
    GIT_STRATEGY: none
  rules:
    - if: ($CI_MERGE_REQUEST_IID || $CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master")
  script:
    - >
      docker container run
      --rm
      $CI_REGISTRY_IMAGE:temp
      test

push_tag_image:
  stage: push
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - docker pull $CI_REGISTRY_IMAGE:temp
    - docker tag $CI_REGISTRY_IMAGE:temp $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

push_develop_image:
  stage: push
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  script:
    - docker pull $CI_REGISTRY_IMAGE:temp
    - docker tag $CI_REGISTRY_IMAGE:temp $CI_REGISTRY_IMAGE:develop
    - docker push $CI_REGISTRY_IMAGE:develop

deploy_development:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  environment:
    name: development
    action: start
    on_stop: manual_stop_development
  only:
    - develop
  script:
    - echo $PORT
    - echo "$PORT"
    - docker container stop develop_to-do-api || true
    - docker container rm develop_to-do-api || true
    - >
      docker container run
      --publish $PORT:3000
      --name develop_to-do-api
      --detach
      --restart unless-stopped
      $CI_REGISTRY/alvarogarciafer/to-do-api:develop
      run
      --env NODE_ENV=$NODE_ENV
      --env PORT=$PORT
      start

manual_stop_development:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  environment:
    name: development
    action: stop
  only:
    - develop
  when: manual
  script:
    - docker container stop develop_to-do-api || true
    - docker container rm develop_to-do-api || true
      
push_production_image:
  stage: push
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  script:
    - docker pull $CI_REGISTRY_IMAGE:temp
    - docker tag $CI_REGISTRY_IMAGE:temp $CI_REGISTRY_IMAGE
    - docker push $CI_REGISTRY_IMAGE

deploy_production:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  environment:
    name: production
    action: start
    on_stop: manual_stop_production
  only:
    - master
  script:
    - docker container stop to-do-api || true
    - docker container rm to-do-api || true
    - >
      docker container run
      --publish $PORT:3000
      --name to-do-api
      --detach
      --restart unless-stopped
      $CI_REGISTRY/alvarogarciafer/to-do-api
      run
      --env NODE_ENV=$NODE_ENV
      --env PORT=$PORT
      start

manual_stop_production:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  environment:
    name: production
    action: stop
  only:
    - master
  when: manual
  script:
    - docker container stop to-do-api || true
    - docker container rm to-do-api || true
