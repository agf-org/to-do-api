name: main

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          
      - name: Run linter
        run: |
          echo "TO_DO_API_TAG=test" >> .env
          docker-compose run \
          --rm \
          to-do-api \
          run linter
          rm .env

      - name: Run unit tests
        run: |
          echo "TO_DO_API_TAG=test" >> .env
          docker-compose run \
          --rm \
          to-do-api \
          test
          rm .env

  build:
    runs-on: self-hosted
    needs: test
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Build and push latest image
        run: |
          echo "TO_DO_API_TAG=latest" >> .env
          docker-compose build to-do-api
          docker-compose push  to-do-api
          rm .env

      - name: Autotag package
        uses: butlerlogic/action-autotag@stable
        id: action-autotag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          strategy: package
          tag_prefix: v

      - name: Build and push tagged image
        run: |
          if [[ "${{ steps.action-autotag.outputs.tagname }}" != "" ]]; then
            echo "TO_DO_API_TAG=${{ steps.action-autotag.outputs.tagname }}" >> .env
            docker-compose build to-do-api
            docker-compose push to-do-api
            rm .env
          fi
          
  deploy:
    runs-on: self-hosted
    needs: build
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Deploy containers
        run: |
          docker-compose down
          echo "TO_DO_API_TAG=latest" >> .env
          echo "NODE_ENV=production" >> .env
          docker-compose up -d
          rm .env
