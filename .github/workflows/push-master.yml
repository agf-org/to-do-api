name: push-production

env:
  NODE_ENV: 'production'
  PORT: '3000'
  IMAGE: 'ghcr.io/agf-org/to-do-api'
  IMAGE_TAG: 'latest'
  CONTAINER_NAME: 'to-do-api'

on:
  push:
    branches: [ master ]

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build test image
        run: |
          docker pull ${{ env.IMAGE }}:test || true
          docker build \
          --cache-from ${{ env.IMAGE }}:test \
          --tag ${{ env.IMAGE }}:test \
          .
          docker push ${{ env.IMAGE }}:test

      - name: Run linter
        run: |
          docker container run \
          --rm \
          ${{ env.IMAGE }}:test \
          run linter

      - name: Run unit tests
        run: |
          docker container run \
          --rm \
          ${{ env.IMAGE }}:test \
          test

  build:
    needs: test
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build image
        run: |
          docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG}} || true
          docker build \
          --cache-from ${{ env.IMAGE }}:${{ env.IMAGE_TAG}} \
          --tag ${{ env.IMAGE }}:${{ env.IMAGE_TAG}} \
          .
          docker push ${{ env.IMAGE }}:${{ env.IMAGE_TAG}}
          
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Deploy container
        run: |
          docker container stop ${{ env.CONTAINER_NAME}} || true
          docker container rm ${{ env.CONTAINER_NAME}} || true
          echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env
          docker container run \
          --env-file .env \
          --publish ${{ env.PORT }}:3000 \
          --name ${{ env.CONTAINER_NAME}} \
          --detach \
          --restart unless-stopped \
          ${{ env.IMAGE }}:${{ env.IMAGE_TAG}} \
          start
          rm .env
